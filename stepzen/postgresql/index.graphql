type Location_store {
	auth_id: String
	latitude: String
	location_id: ID!
	longtitude: String
	users: Users @materializer(query: "usersUsingLocation_store_auth_id_fkey")
}

type Orders {
	current_user_id: String
	order_detail: String
	order_id: ID!
	trade_user_id: String
	usersUsingOrders_current_user_id_fkey: Users
		@materializer(query: "usersUsingOrders_current_user_id_fkey")
	usersUsingOrders_trade_user_id_fkey: Users
		@materializer(query: "usersUsingOrders_trade_user_id_fkey")
}

type Score {
	auth_id: String
	score_carbon: ID
	score_id: ID
	score_trash: ID
	score_tree: ID
	users: Users @materializer(query: "usersUsingScore_auth_id_fkey")
}

type Store {
	auth_id: String
	store_detail: String
	store_user_id: ID!
	users: Users @materializer(query: "usersUsingStore_auth_id_fkey")
}

type Users {
	address: String
	auth_id: String!
	line_id: String
	location_store: [Location_store]
		@materializer(query: "location_storeUsingLocation_store_auth_id_fkey")
	ordersUsingOrders_current_user_id_fkey: [Orders]
		@materializer(query: "ordersUsingOrders_current_user_id_fkey")
	ordersUsingOrders_trade_user_id_fkey: [Orders]
		@materializer(query: "ordersUsingOrders_trade_user_id_fkey")
	phone_number: String
	roles: String
	score: [Score] @materializer(query: "scoreUsingScore_auth_id_fkey")
	store: [Store] @materializer(query: "storeUsingStore_auth_id_fkey")
	user_name: String
}

"""
The following queries are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Query {
	" Queries for type 'Location_store' "
	location_store(location_id: ID!): Location_store
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "location_store"
			configuration: "postgresql_config"
		)
	location_storeList: [Location_store]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "location_store"
			configuration: "postgresql_config"
		)
	location_storePaginatedList(first: Int, after: Int): [Location_store]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "auth_id", "latitude", "location_id", "longtitude" FROM "location_store" ORDER BY "location_id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	location_storeUsingLocation_store_auth_id_fkey(
		auth_id: String!
	): [Location_store]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "auth_id", "latitude", "location_id", "longtitude" FROM "location_store" WHERE "auth_id" = $1
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'Orders' "
	orders(order_id: ID!): Orders
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "orders"
			configuration: "postgresql_config"
		)
	ordersList: [Orders]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "orders"
			configuration: "postgresql_config"
		)
	ordersPaginatedList(first: Int, after: Int): [Orders]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "current_user_id", "order_detail", "order_id", "trade_user_id" FROM "orders" ORDER BY "order_id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	ordersUsingOrders_current_user_id_fkey(auth_id: String!): [Orders]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "current_user_id", "order_detail", "order_id", "trade_user_id" FROM "orders" WHERE "current_user_id" = $1
			"""
			configuration: "postgresql_config"
		)
	ordersUsingOrders_trade_user_id_fkey(auth_id: String!): [Orders]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "current_user_id", "order_detail", "order_id", "trade_user_id" FROM "orders" WHERE "trade_user_id" = $1
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'Score' "
	score(score_id: ID!): Score
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "score"
			configuration: "postgresql_config"
		)
	scoreList: [Score]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "score"
			configuration: "postgresql_config"
		)
	scorePaginatedList(first: Int, after: Int): [Score]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "auth_id", "score_carbon", "score_id", "score_trash", "score_tree" FROM "score" ORDER BY "score_id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	scoreUsingScore_auth_id_fkey(auth_id: String!): [Score]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "auth_id", "score_carbon", "score_id", "score_trash", "score_tree" FROM "score" WHERE "auth_id" = $1
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'Store' "
	store(store_user_id: ID!): Store
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "store"
			configuration: "postgresql_config"
		)
	storeList: [Store]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "store"
			configuration: "postgresql_config"
		)
	storePaginatedList(first: Int, after: Int): [Store]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "auth_id", "store_detail", "store_user_id" FROM "store" ORDER BY "store_user_id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	storeUsingStore_auth_id_fkey(auth_id: String!): [Store]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "auth_id", "store_detail", "store_user_id" FROM "store" WHERE "auth_id" = $1
			"""
			configuration: "postgresql_config"
		)
	" Queries for type 'Users' "
	users(auth_id: String!): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "users"
			configuration: "postgresql_config"
		)
	usersList: [Users]
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "users"
			configuration: "postgresql_config"
		)
	usersSellerList(first: Int, after: Int): [Users]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "address", "auth_id", "line_id", "phone_number", "roles", "user_name" FROM "users"  WHERE "roles" = 'Seller' ORDER BY "auth_id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	usersPaginatedList(first: Int, after: Int): [Users]
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "address", "auth_id", "line_id", "phone_number", "roles", "user_name" FROM "users" ORDER BY "auth_id" LIMIT $1 OFFSET $2
			"""
			configuration: "postgresql_config"
		)
	usersUsingLocation_store_auth_id_fkey(auth_id: String!): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "address", "auth_id", "line_id", "phone_number", "roles", "user_name" FROM "users" WHERE "auth_id" = $1
			"""
			configuration: "postgresql_config"
		)
	usersUsingOrders_current_user_id_fkey(current_user_id: String!): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "address", "auth_id", "line_id", "phone_number", "roles", "user_name" FROM "users" WHERE "auth_id" = $1
			"""
			configuration: "postgresql_config"
		)
	usersUsingOrders_trade_user_id_fkey(trade_user_id: String!): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "address", "auth_id", "line_id", "phone_number", "roles", "user_name" FROM "users" WHERE "auth_id" = $1
			"""
			configuration: "postgresql_config"
		)
	usersUsingScore_auth_id_fkey(auth_id: String!): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "address", "auth_id", "line_id", "phone_number", "roles", "user_name" FROM "users" WHERE "auth_id" = $1
			"""
			configuration: "postgresql_config"
		)
	usersUsingStore_auth_id_fkey(auth_id: String!): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			SELECT "address", "auth_id", "line_id", "phone_number", "roles", "user_name" FROM "users" WHERE "auth_id" = $1
			"""
			configuration: "postgresql_config"
		)
}

"""
The following mutations are just a set of examples of how to access your schema.
Feel free to modify them or aggregate more.
"""
type Mutation {
	" Mutations for type 'Location_store' "
	deleteLocation_store(location_id: ID!): Location_store
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "location_store"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertLocation_store(
		auth_id: String
		longtitude: String
		latitude: String
	): Location_store
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "location_store"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updateLocation_store(
		location_id: ID!
		auth_id: String
		latitude: String
		longtitude: String
	): Location_store
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "location_store" SET
			  "auth_id" = COALESCE($2, "auth_id"),
			  "latitude" = COALESCE($3, "latitude"),
			  "longtitude" = COALESCE($4, "longtitude")
			WHERE
			  "location_id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
	" Mutations for type 'Orders' "
	deleteOrders(order_id: ID!): Orders
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "orders"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertOrders(
		trade_user_id: String
		current_user_id: String
		order_detail: String
	): Orders
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "orders"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updateOrders(
		order_id: ID!
		current_user_id: String
		order_detail: String
		trade_user_id: String
	): Orders
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "orders" SET
			  "current_user_id" = COALESCE($2, "current_user_id"),
			  "order_detail" = COALESCE($3, "order_detail"),
			  "trade_user_id" = COALESCE($4, "trade_user_id")
			WHERE
			  "order_id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
	" Mutations for type 'Score' "
	deleteScore(score_id: ID!): Score
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "score"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertScore(
		auth_id: String
		score_tree: ID
		score_carbon: ID
		score_trash: ID
	): Score
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "score"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updateScore(
		score_id: ID!
		auth_id: String
		score_carbon: ID
		score_trash: ID
		score_tree: ID
	): Score
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "score" SET
			  "auth_id" = COALESCE($2, "auth_id"),
			  "score_carbon" = COALESCE($3, "score_carbon"),
			  "score_trash" = COALESCE($4, "score_trash"),
			  "score_tree" = COALESCE($5, "score_tree")
			WHERE
			  "score_id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
	" Mutations for type 'Store' "
	deleteStore(store_user_id: ID!): Store
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "store"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertStore(auth_id: String, store_detail: String): Store
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "store"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updateStore(
		store_user_id: ID!
		auth_id: String
		store_detail: String
	): Store
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "store" SET
			  "auth_id" = COALESCE($2, "auth_id"),
			  "store_detail" = COALESCE($3, "store_detail")
			WHERE
			  "store_user_id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
	" Mutations for type 'Users' "
	deleteUsers(auth_id: String!): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "users"
			dml: DELETE
			configuration: "postgresql_config"
		)
	insertUsers(
		roles: String
		address: String
		line_id: String
		user_name: String
		auth_id: String!
		phone_number: String
	): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			table: "users"
			dml: INSERT
			configuration: "postgresql_config"
		)
	updateUsers(
		auth_id: String!
		address: String
		line_id: String
		phone_number: String
		roles: String
		user_name: String
	): Users
		@dbquery(
			type: "postgresql"
			schema: "public"
			query: """
			UPDATE "users" SET
			  "address" = COALESCE($2, "address"),
			  "line_id" = COALESCE($3, "line_id"),
			  "phone_number" = COALESCE($4, "phone_number"),
			  "roles" = COALESCE($5, "roles"),
			  "user_name" = COALESCE($6, "user_name")
			WHERE
			  "auth_id" = $1
			RETURNING *
			"""
			configuration: "postgresql_config"
		)
}
